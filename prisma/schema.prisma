generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String     @id @default(auto()) @map("_id") @db.ObjectId
  email           String     @unique
  emailIsVerified Boolean    @default(false)
  password        String
  name            String
  active          Boolean    @default(true)
  refreshToken    String?
  createdAt       DateTime   @default(now())
  createdBy       String?
  updatedAt       DateTime?  @updatedAt
  updatedBy       String?
  deletedAt       DateTime?
  deletedBy       String?
  userRole        UserRole[]
  Product         Product[]
}

model UserRole {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  userId    String    @db.ObjectId
  user      User      @relation(fields: [userId], references: [id])
  roleId    String    @db.ObjectId
  role      Role      @relation(fields: [roleId], references: [id])
  createdAt DateTime  @default(now())
  createdBy String?
  updatedAt DateTime? @updatedAt
  updatedBy String?
  deletedAt DateTime?
  deletedBy String?
}

model Role {
  id                String              @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  description       String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime?           @updatedAt
  deletedAt         DateTime?
  UserRole          UserRole[]
  roleAuthorization RoleAuthorization[]
}

model Module {
  id                String              @id @default(auto()) @map("_id") @db.ObjectId
  type              ModuleType
  name              String
  slug              String
  menuText          String
  menuOrderNo       Int
  accessKey         String
  icon              String
  isPublic          Boolean             @default(false)
  description       String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime?           @default(now()) @updatedAt
  deletedAt         DateTime?           @default(now())
  roleAuthorization RoleAuthorization[]
}

enum ModuleType {
  MENU
  ELEMENT
}

model RoleAuthorization {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  roleId    String    @db.ObjectId
  role      Role      @relation(fields: [roleId], references: [id])
  moduleId  String    @db.ObjectId
  module    Module    @relation(fields: [moduleId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?
}

enum ProductType {
  MAIN_BARENG  @map("Main Bareng")
  KOMEN_ALBUM  @map("Komen Album")
  REQUEST_HERO @map("Request Hero")
  JOKI_BINTANG @map("Joki Bintang")
  SUBATHON     @map("SUBATHON")
}

model Product {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  price         Int
  description   String?
  userId        String        @db.ObjectId
  user          User          @relation(fields: [userId], references: [id])
  type          ProductType
  is_active     Boolean       @default(false)
  is_membership Boolean       @default(false)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime?     @updatedAt
  deletedAt     DateTime?
  Transaction   Transaction[]
}

model Transaction {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  idOrder      String
  email        String
  name         String
  phone        String
  idAkunGame   String
  nickname     String
  ranked       String
  sumGame      String
  totalPrice   String
  idMembership String?
  productId    String    @db.ObjectId
  product      Product   @relation(fields: [productId], references: [id])
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt
  deletedAt    DateTime?
}

model TransactionCharge {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  orderId  String
  response Json
}

model TransactionNotifHandler {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  response Json
}
